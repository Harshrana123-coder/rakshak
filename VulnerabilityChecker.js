import { useState } from 'react';
import axios from 'axios';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

// Register Chart.js components
ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const VulnerabilityChecker = () => {
  const [url, setUrl] = useState('');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const checkVulnerabilities = async (e) => {
    e.preventDefault();
    const source = axios.CancelToken.source();
    const timeout = setTimeout(() => {
      source.cancel('Request timed out (15 seconds)');
    }, 15000);

    setLoading(true);
    setError(null);
    setResults([]);

    try {
      const response = await axios.post('http://localhost:5000/api/scan', { url }, {
        cancelToken: source.token,
        timeout: 30000,
        validateStatus: (status) => status < 500
      });

      clearTimeout(timeout);
      setResults(response.data.vulnerabilities);
    } catch (error) {
      if (axios.isCancel(error)) {
        setError('Scan timed out. Please try again with a simpler website.');
      } else {
        setError(error.response?.data?.message || error.message || 'Scan failed');
      }
    } finally {
      setLoading(false);
      clearTimeout(timeout);
    }
  };

  // Prepare data for the bar chart
  const severityCounts = results.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {});

  const chartData = {
    labels: Object.keys(severityCounts),
    datasets: [
      {
        label: 'Vulnerability Severity Distribution',
        data: Object.values(severityCounts),
        backgroundColor: [
          'rgba(255, 99, 132, 0.6)', // Critical
          'rgba(255, 159, 64, 0.6)', // High
          'rgba(255, 205, 86, 0.6)', // Medium
          'rgba(75, 192, 192, 0.6)', // Low
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(255, 159, 64, 1)',
          'rgba(255, 205, 86, 1)',
          'rgba(75, 192, 192, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Vulnerability Severity Distribution',
      },
    },
  };

  return (
    <div className="min-h-screen p-8" style={{ backgroundColor: '#61636a' }}>
      <div className="max-w-4xl mx-auto">
        <form onSubmit={checkVulnerabilities} className="mb-8">
          <div className="flex gap-4">
            <input
              type="url"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="Enter website URL"
              required
              className="flex-1 p-4 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              type="submit"
              disabled={loading}
              className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed"
            >
              {loading ? (
                <span className="flex items-center">
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Scanning...
                </span>
              ) : 'Scan Website'}
            </button>
            <button
              type="button"
              onClick={() => window.location.replace("https://javierolmedo.github.io/OWASP-Calculator/")}
              className="px-6 py-3 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg font-medium transition-colors"
            >
              OWASP Tools
            </button>
          </div>
        </form>

        {error && (
          <div className="p-4 mb-6 bg-red-100 border border-red-200 rounded-lg">
            <p className="text-red-700 font-medium">{error}</p>
          </div>
        )}

        {results.length > 0 && (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-white mb-6">Scan Results</h2>

            {/* Vulnerability List */}
            {results.map((vuln, index) => (
              <div
                key={index}
                className="p-6 bg-white rounded-xl shadow-lg transition-transform hover:scale-[1.005]"
              >
                <div className={`border-l-4 pl-4 ${
                  vuln.severity === 'Critical' ? 'border-red-500' :
                  vuln.severity === 'High' ? 'border-orange-500' :
                  'border-yellow-500'
                }`}>
                  <h3 className="text-xl font-bold text-gray-800 mb-2">{vuln.name}</h3>
                  <p className="text-gray-600 mb-4">{vuln.description}</p>
                  <div className="flex items-center gap-4">
                    <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                      vuln.severity === 'Critical' ? 'bg-red-100 text-red-800' :
                      vuln.severity === 'High' ? 'bg-orange-100 text-orange-800' :
                      'bg-yellow-100 text-yellow-800'
                    }`}>
                      Severity: {vuln.severity}
                    </span>
                  </div>
                  {vuln.prevention && (
                    <div className="mt-6 bg-blue-50 p-4 rounded-lg">
                      <div className="flex items-center gap-2 mb-3">
                        <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <p className="font-semibold text-blue-800">Prevention Measures</p>
                      </div>
                      <ul className="space-y-2 pl-6">
                        {vuln.prevention.map((tip, tipIndex) => (
                          <li key={tipIndex} className="text-blue-700 text-sm before:content-['â€¢'] before:mr-2 before:text-blue-500">
                            {tip}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            ))}

            {/* Bar Chart */}
            <div className="p-6 bg-white rounded-xl shadow-lg">
              <Bar data={chartData} options={chartOptions} />
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityChecker;